C51 COMPILER V9.51   MAIN                                                                  09/23/2013 14:48:10 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\build\main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\main.c REGFILE(.\build\uart_hello_world_nrf24le1.ORC) BROWSE NOINTPROMOT
                    -E MODDP2 INCDIR(..\..\..\..\hal\nrf24le1;..\..\..\..\compiler\c51;..\..\..\..\compiler\common) DEBUG OBJECTEXTEND PRINT(
                    -.\lst\main.lst) TABS(2) OBJECT(.\build\main.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision: 133 $
  12           */
  13          
  14          /** @file
  15           * @brief UART example
  16           * @defgroup uart_example UART "Hello World" example
  17           * @{
  18           * @ingroup nrf_examples
  19           *
  20           * @brief This example writes the string "Hello World" on start-up. After this all
  21           * characters received on the RXD input are echoed to the TXD output.
  22           *
  23           * The example implements the low level stdio functions putchar() and getchar() so that standard
  24           * IO functions such as printf() and gets() can be used by the application.
  25           *
  26          */
  27          
  28          //lint -e732
  29          //lint -e713
  30          //lint -e640
  31          
  32          #include <stdio.h>
  33          #include "nrf24le1.h"
  34          #include "hal_uart.h"
  35          #include "hal_clk.h"
  36          
  37          // Cusomization of low level stdio function. Used by for example printf().
  38          #ifdef __ICC8051__
              int putchar(int c)
              #else /*presume C51 or other accepting compilator*/
  41          char putchar(char c)
  42          #endif
  43          {
  44   1        hal_uart_putchar(c);
  45   1        return c;
  46   1      }
  47          
  48          // Cusomization of low level stdio function. Used by for example gets().
  49          #ifdef __ICC8051__
              int getchar(void)
              #else /*presume C51 or other accepting compilator*/
  52          char getchar(void)
  53          #endif
C51 COMPILER V9.51   MAIN                                                                  09/23/2013 14:48:10 PAGE 2   

  54          {
  55   1        return hal_uart_getchar();
  56   1      }
  57          
  58          // Repeated putchar to print a string
  59          void putstring(char *s)
  60          {
  61   1        while(*s != 0)
  62   1          putchar(*s++);
  63   1      }
  64          
  65          void main(void)
  66          {
  67   1        // Configure TXD pin as output.
  68   1        // P0.5, P0.3 and P1.0 are configured as outputs to make the example run on
  69   1        // either 24-pin, 32-pin or 48-pin nRF24LE1 variants.
  70   1        P0DIR = 0xD7;
  71   1        P1DIR = 0xFE;
  72   1      
  73   1         // Initializes the UART
  74   1        hal_uart_init(UART_BAUD_9K6);
  75   1      
  76   1        // Wait for XOSC to start to ensure proper UART baudrate
  77   1        while(hal_clk_get_16m_source() != HAL_CLK_XOSC16M)
  78   1        {}
  79   1      
  80   1        // Enable global interrupts
  81   1        EA = 1;
  82   1      
  83   1        // Print "Hello World" at start-up
  84   1        putstring("\r\nHello World!\r\n");
  85   1      
  86   1        for(;;)
  87   1        {
  88   2          // If any characters received
  89   2          if( hal_uart_chars_available() )
  90   2          {
  91   3            P3 = 0x11;
  92   3            // Echo received characters
  93   3            putchar(getchar());
  94   3          }
  95   2        }
  96   1      }
  97          /** @} */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     92    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
