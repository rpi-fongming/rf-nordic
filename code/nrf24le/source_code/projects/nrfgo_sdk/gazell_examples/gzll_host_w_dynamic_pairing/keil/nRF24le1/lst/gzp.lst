C51 COMPILER V9.51   GZP                                                                   09/06/2013 01:48:07 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE GZP
OBJECT MODULE PLACED IN .\build\gzp.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\..\..\..\..\gazell\common\gzp.c LARGE OBJECTADVANCED ROM(COMPACT) REG
                    -FILE(.\build\gzll_host_w_dyn_pair_nrf24le1.ORC) BROWSE NOINTPROMOTE MODC2 INCDIR(..\..\..\..\..\..\hal;..\..\..\..\..\..
                    -\hal\nrf24l01p;..\..\..\..\..\..\gazell\common;..\..\..\..\..\..\gazell\nrf24le1;..\..\..\params;..\..\..\..\..\..\hal\n
                    -rf24le1;..\..\..\..\..\..\lib\assertions;..\..\..\..\..\..\compiler\c51;..\..\..\..\..\..\compiler\common) DEFINE(EX_PRO
                    -J_LE1) DEBUG PRINT(.\lst\gzp.lst) TABS(2) OBJECT(.\build\gzp.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *              
  11           * $LastChangedRevision: 2471 $
  12           */
  13          
  14          /** @file
  15           * @brief
  16           * Implementation of Gazell pairing library common Device and Host functions
  17           */
  18          
  19          #include "gzp.h"
  20          #include "gzll.h"
  21          #include "hal_aes.h"
  22          #include <string.h>
  23          #include <stdint.h>
  24          #include "memdefs.h"
  25          
  26          //-----------------------------------------------------------------------------
  27          // Global variables
  28          //-----------------------------------------------------------------------------
  29          /**
  30            Constant holding "global pairing address".
  31          */
  32          static code const uint8_t pairing_address[] = {0, GZP_ADDRESS};
  33          
  34          /**
  35            Constant holding pre-defined "validation ID".
  36          */
  37          static code const uint8_t gzp_validation_id[GZP_VALIDATION_ID_LENGTH] = GZP_VALIDATION_ID;
  38          
  39          /**
  40            Constant holding pre-defined "secret key".
  41          */
  42          static code const uint8_t gzp_secret_key[16] = GZP_SECRET_KEY;
  43          
  44          /**
  45            Variable used for AES key selection.
  46          */
  47          static xdata gzp_key_select_t gzp_key_select;
  48          
  49          //-----------------------------------------------------------------------------
  50          // Misc. external variables. 
  51          //-----------------------------------------------------------------------------
C51 COMPILER V9.51   GZP                                                                   09/06/2013 01:48:07 PAGE 2   

  52          
  53          static xdata uint8_t gzp_session_token[GZP_SESSION_TOKEN_LENGTH];
  54          static xdata uint8_t gzp_dyn_key[GZP_DYN_KEY_LENGTH];
  55          
  56          //-----------------------------------------------------------------------------
  57          // Implementation common internal function
  58          //-----------------------------------------------------------------------------
  59          void gzp_update_radio_params(const uint8_t* system_address)
  60          {
  61   1        uint8_t i;
  62   1        uint8_t channels[GZLL_MAX_CHANNEL_TAB_SIZE];
  63   1        uint8_t temp_address[GZLL_ADDRESS_WIDTH];
  64   1      
  65   1        // Configure "global" pairing address
  66   1        gzll_set_address(HAL_NRF_PIPE0, (uint8_t const*)pairing_address);
  67   1      
  68   1        if(system_address != NULL)
  69   1        {
  70   2          for(i = 0; i < GZP_SYSTEM_ADDRESS_WIDTH; i++)
  71   2          {
  72   3            temp_address[i + 1] = *(system_address + i);  
  73   3          }
  74   2      
  75   2          // Configure address for pipe 1 - 5. Address byte set to equal pipe number.
  76   2          for(i = 1; i < 6; i++)
  77   2          {
  78   3            temp_address[0] = i; 
  79   3            gzll_set_address((hal_nrf_address_t)i, temp_address);     
  80   3          }
  81   2        }
  82   1      
  83   1        gzp_generate_channels(&channels[0], &temp_address[1], gzll_get_channel_tab_size());                     
             -  
  84   1        
  85   1        // Write generated channel subset to Gazell Link Layer   
  86   1        gzll_set_channels(&channels[0], gzll_get_channel_tab_size());
  87   1      }
  88          
  89          void gzp_generate_channels(uint8_t* ch_dst, const uint8_t* system_address, uint8_t channel_tab_size)
  90          {
  91   1        uint8_t binsize, spacing, i;
  92   1      
  93   1        binsize = (GZP_CHANNEL_MAX - GZP_CHANNEL_MIN) / channel_tab_size;
  94   1      
  95   1        ch_dst[0] = GZP_CHANNEL_LOW;
  96   1        ch_dst[channel_tab_size - 1] = GZP_CHANNEL_HIGH;
  97   1      
  98   1        for(i = 1; i < (channel_tab_size - 1); i++)
  99   1        {
 100   2          ch_dst[i] = (binsize * i) + (system_address[i % 4] % binsize);  
 101   2        }
 102   1      
 103   1        for(i = 1; i < channel_tab_size; i++)
 104   1        {
 105   2          spacing = (ch_dst[i] - ch_dst[i - 1]); 
 106   2          if(spacing < GZP_CHANNEL_SPACING_MIN)
 107   2          {
 108   3            ch_dst[i] += (GZP_CHANNEL_SPACING_MIN - spacing); 
 109   3          }
 110   2        } 
 111   1      }
 112          
C51 COMPILER V9.51   GZP                                                                   09/06/2013 01:48:07 PAGE 3   

 113          #ifndef GZP_CRYPT_DISABLE
 114          
 115          void gzp_xor_cipher(uint8_t* dst, const uint8_t* src, const uint8_t* pad, uint8_t length)
 116          {
 117   1        uint8_t i;
 118   1      
 119   1        for(i = 0; i < length; i++)
 120   1        {
 121   2          *dst = *src ^ *pad;
 122   2          dst++;
 123   2          src++;
 124   2          pad++;   
 125   2        }
 126   1      }
 127          
 128          bool gzp_validate_id(const uint8_t* id)
 129          {
 130   1        return (memcmp(id, (void*)gzp_validation_id, GZP_VALIDATION_ID_LENGTH) == 0);
 131   1      }
 132          
 133          void gzp_add_validation_id(uint8_t* dst)
 134          {
 135   1        memcpy(dst, (void const*)gzp_validation_id, GZP_VALIDATION_ID_LENGTH); 
 136   1      }
 137          
 138          void gzp_crypt_set_session_token(const uint8_t * token)
 139          {
 140   1        memcpy(gzp_session_token, (void const*)token, GZP_SESSION_TOKEN_LENGTH);
 141   1      }
 142          
 143          void gzp_crypt_set_dyn_key(const uint8_t* key)
 144          {
 145   1        memcpy(gzp_dyn_key, (void const*)key, GZP_DYN_KEY_LENGTH); 
 146   1      }
 147          
 148          void gzp_crypt_get_session_token(uint8_t * dst_token)
 149          {
 150   1        memcpy(dst_token, (void const*)gzp_session_token, GZP_SESSION_TOKEN_LENGTH);
 151   1      }
 152          
 153          void gzp_crypt_get_dyn_key(uint8_t* dst_key)
 154          {
 155   1        memcpy(dst_key, (void const*)gzp_dyn_key, GZP_DYN_KEY_LENGTH); 
 156   1      }
 157          
 158          void gzp_crypt_select_key(gzp_key_select_t key_select)
 159          {
 160   1        gzp_key_select = key_select;
 161   1      }
 162          
 163          void gzp_crypt(uint8_t* dst, const uint8_t* src, uint8_t length)
 164          {
 165   1        uint8_t i;
 166   1        uint8_t key[16];
 167   1        uint8_t iv[16];
 168   1      
 169   1        // Build AES key based on "gzp_key_select"
 170   1        switch(gzp_key_select)
 171   1        {
 172   2          case GZP_ID_EXCHANGE:
 173   2            memcpy(key, (void const*)gzp_secret_key, 16);
 174   2            break;
C51 COMPILER V9.51   GZP                                                                   09/06/2013 01:48:07 PAGE 4   

 175   2          case GZP_KEY_EXCHANGE:
 176   2            memcpy(key, (void const*)gzp_secret_key, 16);
 177   2            gzp_get_host_id(key);
 178   2            break;
 179   2          case GZP_DATA_EXCHANGE:
 180   2            memcpy(key, (void const*)gzp_secret_key, 16);
 181   2            memcpy(key, (void const*)gzp_dyn_key, GZP_DYN_KEY_LENGTH);
 182   2            break;
 183   2          default: 
 184   2            break;
 185   2        }  
 186   1        
 187   1        // Build init vector from "gzp_session_token"
 188   1        for(i = 0; i < 16; i++)
 189   1        {
 190   2          if(i < GZP_SESSION_TOKEN_LENGTH)
 191   2          {
 192   3            iv[i] = gzp_session_token[i];
 193   3          }
 194   2          else
 195   2          {
 196   3            iv[i] = 0;
 197   3          }
 198   2        }
 199   1      
 200   1        // Set up hal_aes using new key and init vector
 201   1        hal_aes_setup(false, ECB, key, NULL); // Note, here we skip the IV as we use ECB mode
 202   1      
 203   1        // Encrypt IV using ECB mode
 204   1        hal_aes_crypt(iv, iv);
 205   1      
 206   1        // Encrypt data by XOR'ing with AES output
 207   1        gzp_xor_cipher(dst, src, iv, length);
 208   1      }
 209          
 210          #endif                       


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    976    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =     19      93
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
